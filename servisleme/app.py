import streamlit as st
import pandas as pd
import joblib
import os


def main():
    
    st.sidebar.title('Streamlit ile ML UygulamasÄ±')
    selected_page = st.sidebar.selectbox('Sayfa SeÃ§iniz..',["-","Tahmin Yap","HakkÄ±nda"])

    if selected_page == "-":
        st.title('KiralÄ±k ev sorgulama uygulamasÄ±na HoÅŸgeldiniz ğŸ‘‹')

        st.markdown(
            """
            Bu proje makine Ã¶ÄŸrenmesi uygulamalarÄ±nÄ±n web ortamÄ±nda streamlit
            kullanÄ±larak yayÄ±nlanmasÄ±na Ã¶rnek olarak geliÅŸtirilmiÅŸtir.HepsiEmlak sitesi Ã¼zerinden Ankara ilindeki kiralÄ±k evlerin verileri Ã§ekilmiÅŸtir
            ve incelenmiÅŸtir. Bu veriler kullanÄ±larak makine Ã¶ÄŸrenmesi modelleri eÄŸitilmiÅŸ ve projeye dahil edilmiÅŸtir.
            
            """)
        st.info("Sol taraftaki Tahmin Yap kÄ±smÄ± Ã§alÄ±ÅŸmÄ±yorsa cmd kÄ±smÄ±nda streamlit run yazdÄ±ÄŸÄ±nÄ±z dizinin servisleme dosyasÄ± olmasÄ± gerekiyor.")
        


    if selected_page == "Tahmin Yap":
        predict()
    
    if selected_page == "HakkÄ±nda":
        about() 
    

def about():
    st.title('GeliÅŸtirici Bilgileri')
    st.subheader('Github Adresi : [Ronay Ã–ktem](https://github.com/Poeron/)')
    st.subheader('Linkedin Adresi : [Ronay Ã–ktem](https://www.linkedin.com/in/ronayoktem)')
    st.subheader('Mail Adresi : ronay_oktem1@hotmail.com')



# Mevcut Ã§alÄ±ÅŸma dizinini al
current_directory = os.getcwd()

def predict():
    # Load the pre-trained Gradient Boosting model
    gb_model = joblib.load(f"{current_directory}\\gradient_boosting_regressor.joblib")

    # Load the data
    data = pd.read_excel(f"{current_directory}\\veri.xlsx")

    # Streamlit App
    st.title('Gradient Boosting Model App')
    konumlar = pd.read_csv(f"{current_directory}\\one_hot_column_names.csv")

    # Get Konum bilgisi interactively from the user
    user_location = st.selectbox('Konum SeÃ§iniz..', konumlar)


    # Example manual input values for prediction
    manual_input = pd.DataFrame({
        'Oda SayÄ±sÄ±': [st.slider("Select Oda SayÄ±sÄ±", min_value=1, max_value=10, value=5)],
        'mÂ²': [st.slider("Select mÂ²", min_value=50, max_value=300, value=100)],
        'Bina YaÅŸÄ±': [st.slider("Select Bina YaÅŸÄ±", min_value=1, max_value=20, value=3)],
        'BulunduÄŸu Kat': [st.slider("Select BulunduÄŸu Kat", min_value=1, max_value=21, value=5)],
        # Set the user-provided location to True and others to False
        **{f'{location}': [True] if location.lower() == user_location.lower() else [False] for location in data.columns[5:]}
    })

    # Make predictions with manual input
    manual_prediction = gb_model.predict(manual_input)

    # Display the predicted value
    st.subheader('Manual Prediction:')
    st.write(f'Manual Prediction: {manual_prediction[0]}')


if __name__ == "__main__":
    main()